#!/usr/bin/env python3
# sok_intelligent_miner.py (Strategic Miner v2.1 - Enhanced Discovery)
# -*- coding: utf-8 -*-

"""
T√°c nh√¢n Th·ª£ m·ªè Th√¥ng minh & Chi·∫øn l∆∞·ª£c (Intelligent & Strategic Miner).

H√†nh vi:
- T·ªïng h·ª£p danh s√°ch node t·ª´ c·∫£ hai ngu·ªìn: b·∫£n ƒë·ªì m·∫°ng ƒë·ªông ('live_network_nodes.json')
  v√† c·∫•u h√¨nh bootstrap tƒ©nh ('bootstrap_config.json').
- Qu√©t TO√ÄN B·ªò c√°c node ƒë√£ bi·∫øt ƒë·ªÉ t√¨m xem c√≥ B·∫§T K·ª≤ giao d·ªãch n√†o ƒëang ch·ªù kh√¥ng.
- N·∫øu ph√°t hi·ªán c√≥ vi·ªác c·∫ßn l√†m (pending tx > 0):
    - N√≥ s·∫Ω t√¨m ra node "kh·ªèe" nh·∫•t (c√≥ chi·ªÅu cao chu·ªói l·ªõn nh·∫•t).
    - N√≥ g·ª≠i y√™u c·∫ßu khai th√°c ƒë·∫øn node kh·ªèe nh·∫•t n√†y ƒë·ªÉ t·ªëi ∆∞u h√≥a c∆° h·ªôi.
- N·∫øu to√†n b·ªô m·∫°ng l∆∞·ªõi y√™n tƒ©nh, n√≥ s·∫Ω ngh·ªâ m·ªôt l√°t r·ªìi m·ªõi qu√©t l·∫°i.
"""

import os
import sys
import requests
import json
import time
import logging
from typing import List, Optional, Set

# Th√™m ƒë∆∞·ªùng d·∫´n d·ª± √°n ƒë·ªÉ c√≥ th·ªÉ import t·ª´ 'sok'
project_root = os.path.abspath(os.path.dirname(__file__))
if os.path.join(project_root, 'sok') not in sys.path:
    sys.path.insert(0, project_root)

try:
    from sok.wallet import Wallet
except ImportError as e:
    print(f"[L·ªñI] Kh√¥ng th·ªÉ import th∆∞ vi·ªán 'sok.wallet'. L·ªói: {e}")
    sys.exit(1)

# --- C·∫§U H√åNH ---
LIVE_NETWORK_CONFIG_FILE = "live_network_nodes.json"
BOOTSTRAP_CONFIG_FILE = "bootstrap_config.json"
MINER_WALLET_FILE = "resilient_miner_wallet.pem"
LOG_FILE = "intelligent_miner.log"
NODE_REQUEST_TIMEOUT = 10

# --- C·∫§U H√åNH API NODE ---
MEMPOOL_ENDPOINT = "/mempool"
CHAIN_STATS_ENDPOINT = "/chain/stats"

# --- C·∫§U H√åNH TH·ªúI GIAN ---
FULL_PATROL_DELAY_SECONDS = 10
RETRY_INTERVAL_SECONDS = 30
CRITICAL_ERROR_DELAY_SECONDS = 60

# C·∫•u h√¨nh Logging chi ti·∫øt
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [StrategicMiner] [%(levelname)s] - %(message)s',
    encoding='utf-8',
    handlers=[
        logging.FileHandler(LOG_FILE, 'w', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# === H√ÄM T√åM KI·∫æM NODE ƒê√É ƒê∆Ø·ª¢C N√ÇNG C·∫§P ===
def load_all_known_nodes() -> List[str]:
    """
    T·∫£i v√† t·ªïng h·ª£p danh s√°ch c√°c node t·ª´ t·∫•t c·∫£ c√°c ngu·ªìn ƒë√£ bi·∫øt.
    ∆Øu ti√™n 'live_network_nodes.json' v√† d√πng 'bootstrap_config.json' l√†m d·ª± ph√≤ng.
    """
    all_nodes: Set[str] = set()

    # Ngu·ªìn 1: File b·∫£n ƒë·ªì m·∫°ng ƒë·ªông (∆Øu ti√™n)
    if os.path.exists(LIVE_NETWORK_CONFIG_FILE):
        try:
            with open(LIVE_NETWORK_CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                live_nodes = data.get("active_nodes", [])
                if live_nodes:
                    logging.info(f"ƒê√£ t√¨m th·∫•y {len(live_nodes)} node t·ª´ b·∫£n ƒë·ªì m·∫°ng ƒë·ªông.")
                    all_nodes.update(live_nodes)
        except (json.JSONDecodeError, IOError) as e:
            logging.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc file b·∫£n ƒë·ªì m·∫°ng ƒë·ªông: {e}")
    
    # Ngu·ªìn 2: File bootstrap tƒ©nh (D·ª± ph√≤ng)
    if os.path.exists(BOOTSTRAP_CONFIG_FILE):
        try:
            with open(BOOTSTRAP_CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                peers = data.get("trusted_bootstrap_peers", {})
                bootstrap_nodes = [p.get('last_known_address') for p in peers.values() if p.get('last_known_address')]
                if bootstrap_nodes:
                    logging.info(f"ƒê√£ t√¨m th·∫•y {len(bootstrap_nodes)} node t·ª´ c·∫•u h√¨nh bootstrap.")
                    all_nodes.update(bootstrap_nodes)
        except (json.JSONDecodeError, IOError) as e:
            logging.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc file bootstrap: {e}")

    if not all_nodes:
        logging.error("Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ node n√†o t·ª´ c·∫£ hai ngu·ªìn c·∫•u h√¨nh.")

    return list(filter(None, all_nodes))
# ===============================================

class StrategicMiner:
    def __init__(self):
        self.wallet = self._initialize_wallet()

    def _initialize_wallet(self) -> Wallet:
        if not os.path.exists(MINER_WALLET_FILE):
            logging.critical(f"L·ªñI: Kh√¥ng t√¨m th·∫•y v√≠ th·ª£ m·ªè '{MINER_WALLET_FILE}'.")
            sys.exit(1)
        with open(MINER_WALLET_FILE, 'r', encoding='utf-8') as f:
            return Wallet(private_key_pem=f.read())

    def check_for_work(self, nodes: List[str]) -> bool:
        """Qu√©t c√°c node, tr·∫£ v·ªÅ True n·∫øu c√≥ B·∫§T K·ª≤ node n√†o c√≥ giao d·ªãch ƒëang ch·ªù."""
        logging.info(f"ƒêang qu√©t {len(nodes)} node ƒë·ªÉ t√¨m ki·∫øm c√¥ng vi·ªác...")
        for node_url in nodes:
            try:
                response = requests.get(f'{node_url}{MEMPOOL_ENDPOINT}', timeout=NODE_REQUEST_TIMEOUT)
                if response.status_code == 200 and response.json().get('count', 0) > 0:
                    logging.info(f"üî• Ph√°t hi·ªán c√≥ c√¥ng vi·ªác t·∫°i node {node_url}!")
                    return True
            except requests.RequestException:
                logging.debug(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {node_url} ƒë·ªÉ ki·ªÉm tra c√¥ng vi·ªác.")
            except Exception: pass
        return False

    def find_best_node_to_mine(self, nodes: List[str]) -> Optional[str]:
        """T·ª´ danh s√°ch c√°c node, t√¨m ra node c√≥ chi·ªÅu cao chu·ªói l·ªõn nh·∫•t."""
        healthy_nodes = []
        for node_url in nodes:
            try:
                response = requests.get(f'{node_url}{CHAIN_STATS_ENDPOINT}', timeout=NODE_REQUEST_TIMEOUT)
                if response.status_code == 200:
                    stats = response.json()
                    healthy_nodes.append({"url": node_url, "block_height": stats.get('block_height', -1)})
            except requests.RequestException:
                continue
        
        if not healthy_nodes:
            logging.error("Kh√¥ng t√¨m th·∫•y node n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ khai th√°c.")
            return None
            
        best_node = max(healthy_nodes, key=lambda x: x['block_height'])
        logging.info(f"üéØ ƒê√£ ch·ªçn node t·ªët nh·∫•t ƒë·ªÉ khai th√°c: {best_node['url']} (Block: {best_node['block_height']})")
        return best_node['url']

    def _mine_on_node(self, node_url: str):
        """Th·ª±c hi·ªán m·ªôt y√™u c·∫ßu khai th√°c tr√™n m·ªôt node duy nh·∫•t."""
        try:
            logging.info(f"B·∫Øt ƒë·∫ßu y√™u c·∫ßu khai th√°c t·∫°i {node_url}...")
            response = requests.get(
                f'{node_url}/mine',
                params={'miner_address': self.wallet.get_address()},
                timeout=NODE_REQUEST_TIMEOUT + 5
            )
            if response.status_code == 200:
                data = response.json(); block = data.get('block', {}); block_index = block.get('index', '#?')
                reward_tx = (json.loads(block.get('transactions', '[]')) or [{}])[0]; reward_amount = reward_tx.get('amount', 'N/A')
                logging.info(f"‚úÖ TH√ÄNH C√îNG! ƒê√£ khai th√°c Kh·ªëi #{block_index} t·∫°i {node_url}. Th∆∞·ªüng: {reward_amount} SOK.")
            else:
                logging.warning(f"-> Node {node_url} ph·∫£n h·ªìi l·ªói khi khai th√°c: {response.status_code} - {response.text[:100]}")
        except requests.exceptions.RequestException:
            logging.warning(f"-> Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c qu√° th·ªùi gian v·ªõi node {node_url} khi khai th√°c.")
        except Exception as e:
            logging.error(f"-> L·ªói kh√¥ng x√°c ƒë·ªãnh khi khai th√°c t·∫°i {node_url}: {e}", exc_info=False)

    def run(self):
        """V√≤ng l·∫∑p ch√≠nh qu·∫£n l√Ω vi·ªác tu·∫ßn tra v√† khai th√°c chi·∫øn l∆∞·ª£c."""
        logging.info("--- Kh·ªüi ƒë·ªông Th·ª£ m·ªè Th√¥ng minh & Chi·∫øn l∆∞·ª£c (v2.1) ---")
        logging.info(f"ƒê·ªãa ch·ªâ Th·ª£ m·ªè: {self.wallet.get_address()}")
        
        while True:
            try:
                known_nodes = load_all_known_nodes()
                if not known_nodes:
                    logging.warning(f"Kh√¥ng c√≥ node n√†o ƒë·ªÉ tu·∫ßn tra. S·∫Ω th·ª≠ l·∫°i sau {RETRY_INTERVAL_SECONDS} gi√¢y...")
                    time.sleep(RETRY_INTERVAL_SECONDS)
                    continue

                if self.check_for_work(known_nodes):
                    best_node = self.find_best_node_to_mine(known_nodes)
                    if best_node:
                        self._mine_on_node(best_node)
                        time.sleep(5) 
                else:
                    logging.info(f"üíß M·∫°ng l∆∞·ªõi y√™n tƒ©nh. S·∫Ω qu√©t l·∫°i sau {FULL_PATROL_DELAY_SECONDS} gi√¢y.")
                    time.sleep(FULL_PATROL_DELAY_SECONDS)
            
            except KeyboardInterrupt:
                logging.info("\nƒê√£ nh·∫≠n t√≠n hi·ªáu d·ª´ng. Th·ª£ m·ªè s·∫Ω t·∫Øt.")
                break
            except Exception as e:
                logging.error(f"L·ªói nghi√™m tr·ªçng trong v√≤ng l·∫∑p ch√≠nh: {e}", exc_info=True)
                logging.info(f"S·∫Ω th·ª≠ l·∫°i sau {CRITICAL_ERROR_DELAY_SECONDS} gi√¢y.")
                time.sleep(CRITICAL_ERROR_DELAY_SECONDS)

if __name__ == "__main__":
    miner = StrategicMiner()
    miner.run()
