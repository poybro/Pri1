#!/usr/bin/env python3
# sok_node_ultimate_shared_db.py - Node Sokchain v4.0 (T·ªëi th∆∞·ª£ng & D√πng chung CSDL)
# -*- coding: utf-8 -*-

"""
Phi√™n b·∫£n Node T·ªëi th∆∞·ª£ng, T∆∞∆°ng t√°c v√† D√πng chung Database.

- Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p li·ªáu ƒë·ªÉ c·∫•u h√¨nh khi kh·ªüi ƒë·ªông.
- K√≠ch ho·∫°t d·ªãch v·ª• Seeder m·∫°nh m·∫Ω n·∫øu cung c·∫•p ƒë√∫ng m·∫≠t m√£.
- C·ªïng m·∫∑c ƒë·ªãnh cho Node l√† 5000.
- Lu√¥n s·ª≠ d·ª•ng 'blockchain.sqlite' v√† 'node_wallet.pem' cho m·ªçi instance.
- T√≠ch h·ª£p ƒê·ªìng b·ªô h√≥a Th√¥ng minh (Smart Sync) ƒë·ªÉ b·∫£o v·ªá ph·∫ßn c·ª©ng.

C·∫¢NH B√ÅO QUAN TR·ªåNG:
T·∫•t c·∫£ c√°c node kh·ªüi ƒë·ªông t·ª´ file n√†y s·∫Ω c√πng s·ª≠ d·ª•ng M·ªòT file database.
TUY·ªÜT ƒê·ªêI KH√îNG CH·∫†Y HAI NODE C√ôNG L√öC ƒë·ªÉ tr√°nh l√†m h·ªèng d·ªØ li·ªáu.
"""

import os
import sys
import logging
import time
import threading
import requests
import random
import json
import socket
from typing import Optional
from colorama import init, Fore, Style
from waitress import serve
from flask import jsonify

# --- THI·∫æT L·∫¨P M√îI TR∆Ø·ªúNG & ƒê∆Ø·ªúNG D·∫™N ---
project_root = os.path.abspath(os.path.dirname(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

if sys.stdout.encoding != 'utf-8':
    sys.stdout.reconfigure(encoding='utf-8')
init(autoreset=True)

# --- IMPORT C√ÅC TH√ÄNH PH·∫¶N C·ªêT L√ïI ---
try:
    from sok.node_api import create_app
    from sok.utils import Config
    from sok.wallet import Wallet
    from sok.blockchain import Blockchain, Block
    from run_ranger_agent import run_deep_discovery_cycle, load_bootstrap_peers
except ImportError as e:
    print(Fore.RED + f"\n[L·ªñI IMPORT] Kh√¥ng th·ªÉ t·∫£i c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt: {e}")
    sys.exit(1)

# --- C·∫§U H√åNH ƒê·ªíNG B·ªò H√ìA TH√îNG MINH ---
FAST_SYNC_INTERVAL = 15
NORMAL_SYNC_INTERVAL = 75

# (C√°c class SeederService v√† P2PManager gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n tr∆∞·ªõc v√¨ ƒë√£ t·ªëi ∆∞u)
class SeederService:
    REFRESH_INTERVAL_SECONDS = 5 * 60
    def __init__(self):
        self.logger = logging.getLogger("SeederService")
        self.is_running = True
        self.bootstrap_peers = load_bootstrap_peers()
        if not self.bootstrap_peers: self.is_running = False 
        self.discovery_thread = threading.Thread(target=self.run_discovery_loop, daemon=True, name="Seeder-Discovery")
        if self.is_running: self.discovery_thread.start()
    def stop(self): self.is_running = False
    def run_discovery_loop(self):
        while self.is_running:
            try: run_deep_discovery_cycle(self.bootstrap_peers); time.sleep(self.REFRESH_INTERVAL_SECONDS)
            except Exception: time.sleep(60)
    def get_active_peers(self) -> list:
        live_file = os.path.join(project_root, 'live_network_nodes.json')
        if os.path.exists(live_file):
            try: return json.load(open(live_file, 'r', encoding='utf-8')).get("active_nodes", [])
            except Exception: pass
        return []

class P2PManager:
    def __init__(self, blockchain: Blockchain, node_wallet: Wallet, node_port: int, host_ip: str, seeder_node_url: Optional[str] = None):
        self.blockchain = blockchain; self.node_wallet = node_wallet; self.node_port = node_port; self.host_ip = host_ip; self.seeder_node_url = seeder_node_url;
        self.logger = logging.getLogger("P2PManager"); self.is_running = True; self.sync_interval = FAST_SYNC_INTERVAL;
        self.threads = [threading.Thread(target=self._run_active_chain_sync, daemon=True, name="Smart-Sync")]
        if self.seeder_node_url: self.threads.insert(0, threading.Thread(target=self._run_seeder_bootstrap, daemon=True, name="Seeder-Bootstrap"))
    def start(self):
        for thread in self.threads: thread.start()
    def stop(self): self.is_running = False
    def _broadcast_message(self, endpoint: str, data: dict):
        with self.blockchain.peer_lock: peers_to_broadcast = list(self.blockchain.peers.values())
        for peer in peers_to_broadcast:
            try: requests.post(f"{peer['address']}{endpoint}", json=data, timeout=2)
            except requests.RequestException: continue
    def broadcast_transaction(self, tx: dict): self._broadcast_message('/transactions/add_from_peer', tx)
    def broadcast_block(self, block: Block): self._broadcast_message('/blocks/add_from_peer', block.to_dict())
    def _run_seeder_bootstrap(self):
        self.logger.info(f"[P2P] C·ªë g·∫Øng k·∫øt n·ªëi ƒë·∫øn Seeder t·∫°i {self.seeder_node_url}...")
        for _ in range(5):
            if not self.is_running: return
            try:
                response = requests.get(f"{self.seeder_node_url}/get_active_peers", timeout=5)
                if response.status_code == 200:
                    for url in response.json().get("active_nodes", []): self._handshake_and_register(url)
                    self.logger.info(f"‚úÖ [P2P] Ho√†n t·∫•t bootstrap t·ª´ Seeder.")
                    return
            except requests.RequestException: time.sleep(10)
        self.logger.error(f"!!! [P2P] KH√îNG TH·ªÇ K·∫æT N·ªêI ƒê·∫æN SEEDER {self.seeder_node_url}.")
    def _handshake_and_register(self, base_url: str):
        if not isinstance(base_url, str) or not base_url: return
        try:
            full_url = f"http://{base_url}" if not base_url.startswith(('http://', 'https://')) else base_url
            response = requests.get(f'{full_url}/handshake', timeout=3)
            if response.status_code == 200 and response.json().get('node_id') != self.node_wallet.get_address():
                self.blockchain.register_node(response.json()['node_id'], full_url)
        except requests.RequestException: pass
    def _run_active_chain_sync(self):
        self.logger.info("[Smart Sync] Lu·ªìng ƒë·ªìng b·ªô h√≥a th√¥ng minh ƒë√£ s·∫µn s√†ng.")
        time.sleep(15)
        while self.is_running:
            self.logger.info(f"[Smart Sync] B·∫Øt ƒë·∫ßu chu k·ª≥ ki·ªÉm tra (T·∫ßn su·∫•t: {self.sync_interval}s)...")
            try:
                if self.blockchain.resolve_conflicts(): self.sync_interval = FAST_SYNC_INTERVAL
                else: self.sync_interval = NORMAL_SYNC_INTERVAL
            except Exception as e: self.logger.error(f"üí• [Smart Sync] L·ªói: {e}")
            time.sleep(self.sync_interval + random.uniform(1, 5))

# --- ƒêI·ªÇM V√ÄO CH√çNH C·ª¶A CH∆Ø∆†NG TR√åNH ---
if __name__ == '__main__':
    # Giai ƒëo·∫°n t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng
    print(Fore.YELLOW + "--- C·∫§U H√åNH NODE SOKCHAIN (Ch·∫ø ƒë·ªô D√πng chung Database) ---")
    print(Fore.RED + Style.BRIGHT + "C·∫¢NH B√ÅO: Ch·ªâ ch·∫°y M·ªòT node t·∫°i m·ªôt th·ªùi ƒëi·ªÉm v·ªõi file n√†y.")

    print("Nh·∫≠p m·∫≠t m√£ ƒë·ªÉ k√≠ch ho·∫°t Seeder Service (v√≠ d·ª•: AIO), ho·∫∑c b·ªè tr·ªëng: ", end='')
    secret_code = input().strip()
    is_seeder_mode = (secret_code == "@10")

    print("Nh·∫≠p IP/Domain c·ªßa Seeder Node ch√≠nh ƒë·ªÉ k·∫øt n·ªëi (b·ªè tr·ªëng): ", end='')
    seeder_ip = input().strip()
    seeder_connect_url = f"http://{seeder_ip}:5000" if seeder_ip else None
    
    # [THAY ƒê·ªîI] ƒê·∫∑t c·ªïng m·∫∑c ƒë·ªãnh l√† 5000 theo y√™u c·∫ßu.
    default_port = 5000
    print(f"Nh·∫≠p c·ªïng ƒë·ªÉ ch·∫°y Node n√†y (b·ªè tr·ªëng = {default_port}): ", end='')
    port_str = input().strip()
    try: port = int(port_str) if port_str else default_port
    except ValueError: port = default_port
    
    # Giai ƒëo·∫°n kh·ªüi ƒë·ªông h·ªá th·ªëng
    logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] (%(threadName)s) - %(message)s')

    # [GI·ªÆ NGUY√äN] Lu√¥n s·ª≠ d·ª•ng c√πng m·ªôt t√™n file v√≠, kh√¥ng ph·ª• thu·ªôc v√†o port
    wallet_path = os.path.join(project_root, 'node_wallet.pem')
    if not os.path.exists(wallet_path):
        logging.info(f"Kh√¥ng t√¨m th·∫•y v√≠ node. ƒêang t·∫°o m·ªõi t·∫°i '{wallet_path}'...")
        node_wallet = Wallet(); open(wallet_path, 'w', encoding='utf-8').write(node_wallet.get_private_key_pem())
    else:
        node_wallet = Wallet(private_key_pem=open(wallet_path, 'r', encoding='utf-8').read())
    
    genesis_wallet = None

    try: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect(('8.8.8.8', 1)); host_ip = s.getsockname()[0]
    except Exception: host_ip = '127.0.0.1'
    finally: s.close()
    
    # [GI·ªÆ NGUY√äN] Lu√¥n s·ª≠ d·ª•ng c√πng m·ªôt t√™n file database, kh√¥ng ph·ª• thu·ªôc v√†o port
    db_file_path = os.path.join(project_root, 'blockchain.sqlite')
    logging.info(f"S·ª≠ d·ª•ng c∆° s·ªü d·ªØ li·ªáu d√πng chung t·∫°i: {db_file_path}")
    blockchain_instance = Blockchain(db_path=db_file_path)

    p2p_manager = P2PManager(blockchain=blockchain_instance, node_wallet=node_wallet, node_port=port, host_ip=host_ip, seeder_node_url=seeder_connect_url)
    app = create_app(blockchain=blockchain_instance, p2p_manager=p2p_manager, node_wallet=node_wallet, genesis_wallet=genesis_wallet)

    seeder_instance = None
    if is_seeder_mode:
        logging.info(Fore.MAGENTA + Style.BRIGHT + "K√çCH HO·∫†T D·ªäCH V·ª§ SEEDER...")
        seeder_instance = SeederService()
        if seeder_instance.is_running:
            @app.route('/get_active_peers', methods=['GET'])
            def get_active_peers_api(): return jsonify({"active_nodes": seeder_instance.get_active_peers()}), 200
            logging.info("‚úÖ ƒê√£ th√™m endpoint /get_active_peers v√†o m√°y ch·ªß API.")
    
    p2p_manager.start()
    
    seeder_status = Fore.GREEN + "[ULTIMATE MODE - ENABLED]" if seeder_instance and seeder_instance.is_running else Fore.RED + "[NORMAL MODE]"
    print("\n" + "=" * 70)
    print(Style.BRIGHT + Fore.CYAN + "      --- Kh·ªüi ƒë·ªông Node Sokchain v4.0 (Shared DB) ---")
    print("=" * 70); print(f"      Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông: {seeder_status}")
    if seeder_connect_url: print(f"      Seeder ch·ªß ƒë∆∞·ª£c g√°n: {seeder_connect_url}")
    else: print("      Seeder ch·ªß: Kh√¥ng g√°n, s·∫Ω t·ª± kh√°m ph√° m·∫°ng.")
    print(f"      Node ID: {node_wallet.get_address()}"); print(f"      L·∫Øng nghe API t·∫°i: http://{host_ip}:{port}")
    print(Fore.YELLOW + Style.BRIGHT + f"      CSDL & V√≠ D√ôNG CHUNG: blockchain.sqlite, node_wallet.pem")
    print(f"      P2P: Smart Sync + Bootstrap (n·∫øu c√≥)"); print("=" * 70)
    
    try:
        serve(app, host='0.0.0.0', port=port, threads=20)
    finally:
        if p2p_manager: p2p_manager.stop()
        if seeder_instance: seeder_instance.stop()
        logging.info("ƒê√£ d·ª´ng node an to√†n.")
